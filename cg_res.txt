--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         1048576 B, 64 B, 16-way associative
Command:          ./a.out
Data file:        cachegrind.out.19822
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   decrease_for5.cpp
                  decrease_for4.cpp
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr               DLmr               Dw                   D1mw               DLmw               
--------------------------------------------------------------------------------
4,125,758,063 (100.0%) 8,428 (100.0%) 7,025 (100.0%) 799,100,298 (100.0%) 6,254,333 (100.0%) 3,114,477 (100.0%) 134,877,770 (100.0%) 1,630,504 (100.0%) 1,591,695 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr               DLmr               Dw                  D1mw             DLmw              file:function
--------------------------------------------------------------------------------
1,600,601,327 (38.80%)    58 ( 0.69%)    57 ( 0.81%) 352,830,372 (44.15%) 3,010,485 (48.13%) 1,497,563 (48.08%) 48,155,864 (35.70%) 757,161 (46.44%) 751,107 (47.19%)  /home/yoshinao/aps/decrease_for5.cpp:convolution_dec_for5(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
1,552,513,139 (37.63%)    68 ( 0.81%)    47 ( 0.67%) 352,825,368 (44.15%) 3,010,483 (48.13%) 1,503,061 (48.26%) 48,150,860 (35.70%) 757,161 (46.44%) 756,721 (47.54%)  /home/yoshinao/aps/decrease_for4.cpp:convolution_dec_for4(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
  715,775,092 (17.35%)    12 ( 0.14%)    11 ( 0.16%)  32,570,496 ( 4.08%)         0                  0                   0                0                0           ./math/../sysdeps/ieee754/flt-32/s_roundf.c:roundf
   71,299,978 ( 1.73%) 1,929 (22.89%) 1,622 (23.09%)  33,520,239 ( 4.19%)     7,827 ( 0.13%)     1,747 ( 0.06%)    200,143 ( 0.15%)     274 ( 0.02%)     104 ( 0.01%)  ???:???
   70,741,441 ( 1.71%)    35 ( 0.42%)    35 ( 0.50%)   7,489,777 ( 0.94%)    19,650 ( 0.31%)        15 ( 0.00%)  1,908,291 ( 1.41%)  18,007 ( 1.10%)   5,624 ( 0.35%)  /home/yoshinao/aps/conv1.cpp:convolution1(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   21,875,711 ( 0.53%)    35 ( 0.42%)    35 ( 0.50%)   5,130,940 ( 0.64%)    84,339 ( 1.35%)    43,193 ( 1.39%)    751,371 ( 0.56%)  17,329 ( 1.06%)  16,876 ( 1.06%)  /home/yoshinao/aps/main.cpp:convolution(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   18,308,431 ( 0.44%)    38 ( 0.45%)    38 ( 0.54%)   4,537,918 ( 0.57%)    50,778 ( 0.81%)    24,910 ( 0.80%)    751,769 ( 0.56%)  17,323 ( 1.06%)  13,265 ( 0.83%)  /home/yoshinao/aps/decrease_for.cpp:convolution_dec_for(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   16,045,248 ( 0.39%)     0              0                    0                  0                  0          16,045,248 (11.90%)       0                0           /usr/include/c++/12/cmath:convolution_dec_for4(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   16,045,248 ( 0.39%)     0              0                    0                  0                  0          16,045,248 (11.90%)       0                0           /usr/include/c++/12/cmath:convolution_dec_for5(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   14,798,483 ( 0.36%)    28 ( 0.33%)    28 ( 0.40%)   3,317,872 ( 0.42%)    17,180 ( 0.27%)    11,725 ( 0.38%)    840,251 ( 0.62%)  17,327 ( 1.06%)  14,150 ( 0.89%)  /home/yoshinao/aps/decrease_for3.cpp:convolution_dec_for3(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)
   14,735,769 ( 0.36%)    31 ( 0.37%)    31 ( 0.44%)   3,824,700 ( 0.48%)    17,179 ( 0.27%)    11,757 ( 0.38%)    870,371 ( 0.65%)  17,328 ( 1.06%)  14,131 ( 0.89%)  /home/yoshinao/aps/decrease_for2.cpp:convolution_dec_for2(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&)

--------------------------------------------------------------------------------
-- User-annotated source: decrease_for5.cpp
--------------------------------------------------------------------------------
  No information has been collected for decrease_for5.cpp

--------------------------------------------------------------------------------
-- User-annotated source: decrease_for4.cpp
--------------------------------------------------------------------------------
  No information has been collected for decrease_for4.cpp

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/decrease_for.cpp
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr               D1mr            DLmr           Dw               D1mw            DLmw           

-- line 2 ----------------------------------------
        .          .          .                .               .              .                .               .              .           #include <fstream>
        .          .          .                .               .              .                .               .              .           #include <iomanip>
        .          .          .                .               .              .                .               .              .           #include <cmath>
        .          .          .                .               .              .                .               .              .           #include "struct.h"
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           using namespace std;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
  118,616 ( 0.00%) 3 ( 0.04%) 3 ( 0.04%)       1 ( 0.00%)      0              0                7 ( 0.00%)      0              0           void convolution_dec_for(const string& in_file){
        .          .          .                .               .              .                .               .              .               ifstream ifs(in_file, ios::binary);
        .          .          .                .               .              .                .               .              .               ofstream ofs("out.ppm", ios::binary);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                0               0              0               if(!ifs || !ofs){
        .          .          .                .               .              .                .               .              .                   if(!ifs){
        .          .          .                .               .              .                .               .              .                       ifs.close();
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   return ;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               PPMFileHeader file_header;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               char magic[3];
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       0               0              0                1 ( 0.00%)      0              0               ifs.read((char*)&magic, 3);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ofs.write((char*)&magic, 3);
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(ofs.bad()){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                0               0              0               if(magic[0] != 'P' || magic[1] != '6'){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               string line;
        .          .          .                .               .              .                .               .              .               uint16_t max;
        6 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       0               0              0                1 ( 0.00%)      0              0               while(ifs.peek() == '#'){
        .          .          .                .               .              .                .               .              .                   getline(ifs, line);
        .          .          .                .               .              .                .               .              .                   ofs.write(line.c_str(), line.size());
        .          .          .                .               .              .                .               .              .               }
       10 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               if(!(ifs >> file_header.width >> file_header.height >> max)){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "header read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                0               0              0               if(max != 255){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "max value error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ifs.get();// one caracter '\n'
        .          .          .                .               .              .                .               .              .           
        8 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0              0               int pixcel_color_count = file_header.width * file_header.height* 3;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                3 ( 0.00%)      0              0               uint8_t* piccel = new uint8_t[pixcel_color_count];
        6 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0              0               int16_t* piccel2 = new int16_t[pixcel_color_count];
        6 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      0              0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "piccel read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               // multiply by 5
  121,002 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                4 ( 0.00%)      0              0               for(int i = 1; i < file_header.height-1; i++){
  596,611 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)     797 ( 0.00%)      0              0                1 ( 0.00%)      0              0                   for(int j = 1; j < file_header.width-1; j++){
1,186,040 ( 0.03%) 0          0                0               0              0                0               0              0                       for(int c = 0; c < 3; c++){
        .          .          .                .               .              .                .               .              .                           int index = (j + file_header.width* i)*3 + c;
1,067,436 ( 0.03%) 0          0          355,812 ( 0.04%)  5,483 ( 0.09%) 2,977 ( 0.10%) 355,812 ( 0.26%) 11,190 ( 0.69%) 7,584 ( 0.48%)                  piccel2[index] = (int16_t)piccel[index] * (int16_t)5;
        .          .          .                .               .              .                .               .              .                       }
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               // multiply by -1  from above
  121,394 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)     398 ( 0.00%)      0              0                0               0              0               for(int i = 1; i < file_header.height-1; i++){
  718,394 ( 0.02%) 2 ( 0.02%) 2 ( 0.03%) 119,402 ( 0.01%)      1 ( 0.00%)     1 ( 0.00%)     797 ( 0.00%)      0              0                   for(int j = 1; j < file_header.width-1; j++){
1,187,234 ( 0.03%) 0          0              796 ( 0.00%)      0              0                0               0              0                       for(int c = 0; c< 3; c++){
  355,812 ( 0.01%) 0          0          355,812 ( 0.04%)     28 ( 0.00%)    28 ( 0.00%)       0               0              0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[(j + file_header.width* (i-1))*3 + c];
1,067,436 ( 0.03%) 0          0          711,624 ( 0.09%) 16,792 ( 0.27%) 7,891 ( 0.25%)       0               0              0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[(j + file_header.width* (i+1))*3 + c];
        .          .          .                .               .              .                .               .              .                       }
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               // from left
    2,792 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)     399 ( 0.00%)      0              0                1 ( 0.00%)      0              0               for(int i = 1; i < file_header.height-1; i++){
  717,196 ( 0.02%) 1 ( 0.01%) 1 ( 0.01%)   1,194 ( 0.00%)      0              0                0               0              0                   for(int j = 1; j < file_header.width-1; j++){
1,186,040 ( 0.03%) 0          0                0               0              0                0               0              0                       for(int c = 0; c< 3; c++){
  355,812 ( 0.01%) 0          0          355,812 ( 0.04%)  5,597 ( 0.09%) 2,700 ( 0.09%)       0               0              0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[((j+1) + file_header.width* (i))*3 + c];
1,067,436 ( 0.03%) 0          0          711,624 ( 0.09%) 11,195 ( 0.18%) 4,950 ( 0.16%)       0               0              0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[((j-1) + file_header.width* (i))*3 + c];
        .          .          .                .               .              .                .               .              .                       }
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .            
        .          .          .                .               .              .                .               .              .           
    3,117 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       5 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int i = 0; i < file_header.height; i++){
    4,000 ( 0.00%) 0          0                0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)     25 ( 0.00%)     3 ( 0.00%)   1,200 ( 0.00%)     51 ( 0.00%)     0                       piccel2[index] = piccel[index];
        .          .          .                .               .              .                .               .              .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)    400 ( 0.01%)    32 ( 0.00%)   1,200 ( 0.00%)    400 ( 0.02%)     1 ( 0.00%)              piccel2[index1] = piccel[index1];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
    2,107 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       3 ( 0.00%)      2 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int j = 0; j < file_header.width; j++){
    3,000 ( 0.00%) 0          0                0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (j)*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     15 ( 0.00%)    13 ( 0.00%)     900 ( 0.00%)     29 ( 0.00%)    27 ( 0.00%)              piccel2[index] = piccel[index];
       10 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     13 ( 0.00%)     1 ( 0.00%)     900 ( 0.00%)     27 ( 0.00%)    27 ( 0.00%)              piccel2[index2] = piccel[index2];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               
        5 ( 0.00%) 0          0                1 ( 0.00%)      0              0                4 ( 0.00%)      0              0               int counts[5] = {0, 0, 0, 0, 0};
        .          .          .                .               .              .                .               .              .           
        3 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)      uint8_t* res = new uint8_t[pixcel_color_count];
  600,010 ( 0.01%) 1 ( 0.01%) 1 ( 0.01%) 120,002 ( 0.02%)      0              0                1 ( 0.00%)      0              0               for(int i = 0; i < pixcel_color_count/3; i++){
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 120,000 ( 0.02%)      0              0                0               0              0                   for(int c = 0; c < 3; c++){
1,440,000 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%) 360,000 ( 0.05%) 11,222 ( 0.18%) 6,308 ( 0.20%)       0               0              0                        if(piccel2[i*3 + c] > 255){
   16,780 ( 0.00%) 0          0                0               0              0            8,390 ( 0.01%)      0              0                           piccel2[i*3 + c] = 255;
        .          .          .                .               .              .                .               .              .                       }
  703,220 ( 0.02%) 0          0                0               0              0                0               0              0                       else if(piccel2[i*3 + c] < 0){
   45,048 ( 0.00%) 0          0                0               0              0           22,524 ( 0.02%)      0              0                           piccel2[i*3 + c] = 0;
        .          .          .                .               .              .                .               .              .                       }
  720,000 ( 0.02%) 0          0          360,000 ( 0.05%)      0              0          360,000 ( 0.27%)  5,625 ( 0.34%) 5,625 ( 0.35%)              res[i*3 + c] = piccel2[i*3 + c];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .           
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 840,000 ( 0.11%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
  120,000 ( 0.00%) 0          0                0               0              0                0               0              0                   uint8_t roundedColor = (uint8_t)std::round(color);
  240,000 ( 0.01%) 0          0                0               0              0                0               0              0                   if(roundedColor <= 50){
   24,432 ( 0.00%) 0          0           24,432 ( 0.00%)      0              0                0               0              0                       counts[0]++;
        .          .          .                .               .              .                .               .              .                   }
  191,136 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 101){
   32,614 ( 0.00%) 0          0           16,307 ( 0.00%)      0              0                0               0              0                       counts[1]++;
        .          .          .                .               .              .                .               .              .                   }
  158,522 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 152){
   30,384 ( 0.00%) 0          0           15,192 ( 0.00%)      0              0                0               0              0                       counts[2]++;
        .          .          .                .               .              .                .               .              .                   }
  128,138 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                0               0              0                   else if(roundedColor <= 203){
  109,194 ( 0.00%) 0          0           54,597 ( 0.01%)      0              0                0               0              0                       counts[3]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   else{
   18,944 ( 0.00%) 0          0            9,472 ( 0.00%)      0              0                0               0              0                       counts[4]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               ofstream text("out.txt");
       19 ( 0.00%) 4 ( 0.05%) 4 ( 0.06%)       5 ( 0.00%)      0              0                5 ( 0.00%)      0              0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
        .          .          .                .               .              .                .               .              .               text.close();
        .          .          .                .               .              .                .               .              .           
        6 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0              0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel;
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel2;
        2 ( 0.00%) 0          0                0               0              0                1 ( 0.00%)      0              0               delete[] res;
        .          .          .                .               .              .                .               .              .               ifs.close();
        .          .          .                .               .              .                .               .              .               ofs.close();
        .          .          .                .               .              .                .               .              .           
       11 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       9 ( 0.00%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/decrease_for2.cpp
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr               D1mr            DLmr           Dw               D1mw            DLmw           

-- line 2 ----------------------------------------
        .          .          .                .               .              .                .               .              .           #include <fstream>
        .          .          .                .               .              .                .               .              .           #include <iomanip>
        .          .          .                .               .              .                .               .              .           #include <cmath>
        .          .          .                .               .              .                .               .              .           #include "struct.h"
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           using namespace std;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
  237,220 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)       1 ( 0.00%)      0              0          118,611 ( 0.09%)      0              0           void convolution_dec_for2(const string& in_file){
        .          .          .                .               .              .                .               .              .               ifstream ifs(in_file, ios::binary);
        .          .          .                .               .              .                .               .              .               ofstream ofs("out.ppm", ios::binary);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                0               0              0               if(!ifs || !ofs){
        .          .          .                .               .              .                .               .              .                   if(!ifs){
        .          .          .                .               .              .                .               .              .                       ifs.close();
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   return ;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               PPMFileHeader file_header;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               char magic[3];
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ifs.read((char*)&magic, 3);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ofs.write((char*)&magic, 3);
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                0               0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(ofs.bad()){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                0               0              0               if(magic[0] != 'P' || magic[1] != '6'){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               string line;
        .          .          .                .               .              .                .               .              .               uint16_t max;
        6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               while(ifs.peek() == '#'){
        .          .          .                .               .              .                .               .              .                   getline(ifs, line);
        .          .          .                .               .              .                .               .              .                   ofs.write(line.c_str(), line.size());
        .          .          .                .               .              .                .               .              .               }
       10 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               if(!(ifs >> file_header.width >> file_header.height >> max)){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "header read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(max != 255){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "max value error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ifs.get();// one caracter '\n'
        .          .          .                .               .              .                .               .              .           
        8 ( 0.00%) 0          0                2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0              0               int pixcel_color_count = file_header.width * file_header.height* 3;
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 0          0                0               0              0                3 ( 0.00%)      0              0               uint8_t* piccel = new uint8_t[pixcel_color_count];
        6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                2 ( 0.00%)      0              0               int16_t* piccel2 = new int16_t[pixcel_color_count];
        6 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      0              0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "piccel read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               // multiply by 5
    3,595 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)   1,196 ( 0.00%)      0              0                3 ( 0.00%)      0              0               for(int i = 1; i < file_header.height-1; i++){
  956,403 ( 0.02%) 4 ( 0.05%) 4 ( 0.06%) 119,402 ( 0.01%)      0              0              798 ( 0.00%)      0              0                   for(int j = 1; j < file_header.width-1; j++){
1,305,440 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%)     796 ( 0.00%)      0              0                0               0              0                       for(int c = 0; c < 3; c++){
        .          .          .                .               .              .                .               .              .                           int index = (j + file_header.width* i)*3 + c;
        .          .          .                .               .              .                .               .              .                           piccel2[index] = 
        .          .          .                .               .              .                .               .              .                               (int16_t)5* (int16_t)piccel[index] 
1,423,248 ( 0.03%) 0          0          711,624 ( 0.09%)      0              0                0               0              0                               -(int16_t)piccel[((j+1) + file_header.width* (i))*3 + c]
  711,624 ( 0.02%) 0          0          355,812 ( 0.04%)      0              0                0               0              0                               -(int16_t)piccel[((j-1) + file_header.width* (i))*3 + c]
  711,624 ( 0.02%) 0          0          355,812 ( 0.04%)      0              0                0               0              0                               -(int16_t)piccel[(j + file_header.width* (i-1))*3 + c]
1,067,436 ( 0.03%) 0          0          355,812 ( 0.04%)  5,497 ( 0.09%) 5,497 ( 0.18%) 355,812 ( 0.26%) 11,195 ( 0.69%) 8,450 ( 0.53%)                      -(int16_t)piccel[(j + file_header.width* (i+1))*3 + c];
        .          .          .                .               .              .                .               .              .                       }
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .            
        .          .          .                .               .              .                .               .              .           
    3,116 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       4 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int i = 0; i < file_header.height; i++){
    4,000 ( 0.00%) 0          0                0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)     25 ( 0.00%)     3 ( 0.00%)   1,200 ( 0.00%)     51 ( 0.00%)     0                       piccel2[index] = piccel[index];
        .          .          .                .               .              .                .               .              .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)    400 ( 0.01%)    32 ( 0.00%)   1,200 ( 0.00%)    400 ( 0.02%)     1 ( 0.00%)              piccel2[index1] = piccel[index1];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
    2,107 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       3 ( 0.00%)      2 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int j = 0; j < file_header.width; j++){
    3,000 ( 0.00%) 0          0                0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (j)*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     15 ( 0.00%)    13 ( 0.00%)     900 ( 0.00%)     29 ( 0.00%)    27 ( 0.00%)              piccel2[index] = piccel[index];
       10 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     13 ( 0.00%)     0              900 ( 0.00%)     27 ( 0.00%)    27 ( 0.00%)              piccel2[index2] = piccel[index2];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               
        5 ( 0.00%) 0          0                1 ( 0.00%)      0              0                4 ( 0.00%)      0              0               int counts[5] = {0, 0, 0, 0, 0};
        .          .          .                .               .              .                .               .              .           
        3 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)      uint8_t* res = new uint8_t[pixcel_color_count];
  480,010 ( 0.01%) 1 ( 0.01%) 1 ( 0.01%) 120,002 ( 0.02%)      0              0                1 ( 0.00%)      0              0               for(int i = 0; i < pixcel_color_count/3; i++){
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 120,000 ( 0.02%)      0              0                0               0              0                   for(int c = 0; c < 3; c++){
1,440,000 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%) 360,000 ( 0.05%) 11,222 ( 0.18%) 6,206 ( 0.20%)       0               0              0                        if(piccel2[i*3 + c] > 255){
   16,780 ( 0.00%) 0          0                0               0              0            8,390 ( 0.01%)      0              0                           piccel2[i*3 + c] = 255;
        .          .          .                .               .              .                .               .              .                       }
  703,220 ( 0.02%) 0          0                0               0              0                0               0              0                       else if(piccel2[i*3 + c] < 0){
   45,048 ( 0.00%) 0          0                0               0              0           22,524 ( 0.02%)      0              0                           piccel2[i*3 + c] = 0;
        .          .          .                .               .              .                .               .              .                       }
  720,000 ( 0.02%) 0          0          360,000 ( 0.05%)      0              0          360,000 ( 0.27%)  5,625 ( 0.34%) 5,625 ( 0.35%)              res[i*3 + c] = piccel2[i*3 + c];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .           
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 840,000 ( 0.11%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
  120,000 ( 0.00%) 0          0                0               0              0                0               0              0                   uint8_t roundedColor = (uint8_t)std::round(color);
  240,000 ( 0.01%) 0          0                0               0              0                0               0              0                   if(roundedColor <= 50){
   24,432 ( 0.00%) 0          0           24,432 ( 0.00%)      0              0                0               0              0                       counts[0]++;
        .          .          .                .               .              .                .               .              .                   }
  191,136 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 101){
   32,614 ( 0.00%) 0          0           16,307 ( 0.00%)      0              0                0               0              0                       counts[1]++;
        .          .          .                .               .              .                .               .              .                   }
  158,522 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 152){
   30,384 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)  15,192 ( 0.00%)      0              0                0               0              0                       counts[2]++;
        .          .          .                .               .              .                .               .              .                   }
  128,138 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 203){
  109,194 ( 0.00%) 0          0           54,597 ( 0.01%)      0              0                0               0              0                       counts[3]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   else{
   18,944 ( 0.00%) 0          0            9,472 ( 0.00%)      0              0                0               0              0                       counts[4]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               ofstream text("out.txt");
       19 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       5 ( 0.00%)      0              0                5 ( 0.00%)      0              0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
        .          .          .                .               .              .                .               .              .               text.close();
        .          .          .                .               .              .                .               .              .           
        6 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0              0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel;
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel2;
        2 ( 0.00%) 0          0                0               0              0                1 ( 0.00%)      0              0               delete[] res;
        .          .          .                .               .              .                .               .              .               ifs.close();
        .          .          .                .               .              .                .               .              .               ofs.close();
        .          .          .                .               .              .                .               .              .           
       11 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       9 ( 0.00%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/decrease_for4.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr             DLmr             Dw                  D1mw             DLmw             

-- line 2 ----------------------------------------
          .          .          .                   .                .                .                   .                .                .           #include <fstream>
          .          .          .                   .                .                .                   .                .                .           #include <iomanip>
          .          .          .                   .                .                .                   .                .                .           #include <cmath>
          .          .          .                   .                .                .                   .                .                .           #include "struct.h"
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .           using namespace std;
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .           
 16,027,752 ( 0.39%) 4 ( 0.05%) 2 ( 0.03%)          2 ( 0.00%)       0                0                  14 ( 0.00%)       0                0           void convolution_dec_for4(const string& in_file){
          .          .          .                   .                .                .                   .                .                .               ifstream ifs(in_file, ios::binary);
          .          .          .                   .                .                .                   .                .                .               ofstream ofs("out.ppm", ios::binary);
          8 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          4 ( 0.00%)       0                0                   0                0                0               if(!ifs || !ofs){
          .          .          .                   .                .                .                   .                .                .                   if(!ifs){
          .          .          .                   .                .                .                   .                .                .                       ifs.close();
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .                   return ;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               PPMFileHeader file_header;
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               char magic[3];
          .          .          .                   .                .                .                   .                .                .           
         10 ( 0.00%) 4 ( 0.05%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               ifs.read((char*)&magic, 3);
          8 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          0                0                0                   2 ( 0.00%)       0                0               ofs.write((char*)&magic, 3);
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   0                0                0               if(!ifs){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   0                0                0               if(ofs.bad()){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          8 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          4 ( 0.00%)       0                0                   0                0                0               if(magic[0] != 'P' || magic[1] != '6'){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               string line;
          .          .          .                   .                .                .                   .                .                .               uint16_t max;
         12 ( 0.00%) 4 ( 0.05%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               while(ifs.peek() == '#'){
          .          .          .                   .                .                .                   .                .                .                   getline(ifs, line);
          .          .          .                   .                .                .                   .                .                .                   ofs.write(line.c_str(), line.size());
          .          .          .                   .                .                .                   .                .                .               }
         20 ( 0.00%) 4 ( 0.05%) 2 ( 0.03%)          4 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               if(!(ifs >> file_header.width >> file_header.height >> max)){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "header read error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   0                0                0               if(max != 255){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "max value error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          4 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          0                0                0                   2 ( 0.00%)       0                0               ifs.get();
         16 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          4 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
          .          .          .                   .                .                .                   .                .                .               
          .          .          .                   .                .                .                   .                .                .           
          8 ( 0.00%) 0          0                   4 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               int pixcel_color_count = file_header.width * file_header.height* 3;
          8 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          0                0                0                   4 ( 0.00%)       0                0               uint8_t* piccel = new uint8_t[pixcel_color_count];
          6 ( 0.00%) 0          0                   0                0                0                   4 ( 0.00%)       0                0               uint8_t* res = new uint8_t[pixcel_color_count];
         12 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   8 ( 0.00%)       2 ( 0.00%)       2 ( 0.00%)      int counts[5] = {0, 0, 0, 0, 0};
          .          .          .                   .                .                .                   .                .                .           
         10 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
          8 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)          2 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               if(!ifs){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "piccel read error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
     50,064 ( 0.00%) 2 ( 0.02%) 1 ( 0.01%)     15,016 ( 0.00%)   4,606 ( 0.07%)       0                   4 ( 0.00%)       0                0               for(int i = 1; i < file_header.height-1; i++){
112,294,196 ( 2.72%) 6 ( 0.07%) 3 ( 0.04%)     10,014 ( 0.00%)       0                0              15,018 ( 0.01%)       0                0                   for(int j = 1; j < file_header.width-1; j++){
176,320,020 ( 4.27%) 2 ( 0.02%) 1 ( 0.01%)     15,012 ( 0.00%)   4,606 ( 0.07%)       0                   0                0                0                       for(int c = 0; c < 3; c++){
          .          .          .                   .                .                .                   .                .                .                           int index = (j + file_header.width* i)*3 + c;
          .          .          .                   .                .                .                   .                .                .                           int16_t tmp = 
          .          .          .                   .                .                .                   .                .                .                               (int16_t)5* (int16_t)piccel[index] 
192,332,736 ( 4.66%) 0          0          96,166,368 (12.03%) 746,173 (11.93%)     162 ( 0.01%)          0                0                0                               -(int16_t)piccel[((j+1) + file_header.width* (i))*3 + c]
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%)       0                0                   0                0                0                               -(int16_t)piccel[((j-1) + file_header.width* (i))*3 + c]
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%) 746,047 (11.93%)      34 ( 0.00%)          0                0                0                               -(int16_t)piccel[(j + file_header.width* (i-1))*3 + c]
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%) 751,670 (12.02%) 751,670 (24.13%)          0                0                0                               -(int16_t)piccel[(j + file_header.width* (i+1))*3 + c];
          .          .          .                   .                .                .                   .                .                .                           if(tmp > 255){
          .          .          .                   .                .                .                   .                .                .                               tmp = 255;
          .          .          .                   .                .                .                   .                .                .                           }
144,249,552 ( 3.50%) 2 ( 0.02%) 1 ( 0.01%)          0                0                0                   0                0                0                           else if(tmp < 0){
          .          .          .                   .                .                .                   .                .                .                               tmp = 0;
          .          .          .                   .                .                .                   .                .                .                           }
192,332,736 ( 4.66%) 0          0                   0                0                0          48,083,184 (35.65%) 751,771 (46.11%) 751,760 (47.23%)                  res[index] = tmp;
          .          .          .                   .                .                .                   .                .                .                       }
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .            
          .          .          .                   .                .                .                   .                .                .           
     28,816 ( 0.00%) 4 ( 0.05%) 4 ( 0.06%)          8 ( 0.00%)       2 ( 0.00%)       1 ( 0.00%)          0                0                0               for(int i = 0; i < file_header.height; i++){
     60,096 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   0                0                0                   for(int c = 0; c< 3; c++){
          .          .          .                   .                .                .                   .                .                .                       int index = (file_header.width* i)*3 + c;
     30,048 ( 0.00%) 0          0              15,024 ( 0.00%)      26 ( 0.00%)       1 ( 0.00%)     15,024 ( 0.01%)      27 ( 0.00%)       1 ( 0.00%)              res[index] = piccel[index];
          .          .          .                   .                .                .                   .                .                .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
     30,048 ( 0.00%) 0          0              15,024 ( 0.00%)   5,008 ( 0.08%)   4,608 ( 0.15%)     15,024 ( 0.01%)   5,008 ( 0.31%)   4,608 ( 0.29%)              res[index1] = piccel[index1];
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
     26,306 ( 0.00%) 0          0                   6 ( 0.00%)       3 ( 0.00%)       2 ( 0.00%)          0                0                0               for(int j = 0; j < file_header.width; j++){
     37,560 ( 0.00%) 0          0                   0                0                0                   0                0                0                   for(int c = 0; c< 3; c++){
          .          .          .                   .                .                .                   .                .                .                       int index = (j)*3 + c;
     22,536 ( 0.00%) 0          0              11,268 ( 0.00%)     178 ( 0.00%)     163 ( 0.01%)     11,268 ( 0.01%)     178 ( 0.01%)     176 ( 0.01%)              res[index] = piccel[index];
         18 ( 0.00%) 0          0                   0                0                0                   0                0                0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
     22,536 ( 0.00%) 0          0              11,268 ( 0.00%)     175 ( 0.00%)      80 ( 0.00%)     11,268 ( 0.01%)     175 ( 0.01%)     174 ( 0.01%)              res[index2] = piccel[index2];
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .             
 48,135,760 ( 1.17%) 2 ( 0.02%) 2 ( 0.03%)          4 ( 0.00%)       1 ( 0.00%)       0                   0                0                0               for(int i = 0; i < pixcel_color_count/3; i++){
240,678,720 ( 5.83%) 4 ( 0.05%) 4 ( 0.06%) 96,271,488 (12.05%) 751,984 (12.02%) 746,338 (23.96%)          0                0                0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
 16,045,248 ( 0.39%) 0          0                   0                0                0                   0                0                0                   uint8_t roundedColor = (uint8_t)std::round(color);
 32,090,496 ( 0.78%) 0          0                   0                0                0                   0                0                0                   if(roundedColor <= 50){
  5,240,100 ( 0.13%) 0          0           2,620,050 ( 0.33%)       0                0                   0                0                0                       counts[0]++;
          .          .          .                   .                .                .                   .                .                .                   }
 26,850,396 ( 0.65%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 101){
  2,973,149 ( 0.07%) 0          0           2,973,149 ( 0.37%)       0                0                   0                0                0                       counts[1]++;
          .          .          .                   .                .                .                   .                .                .                   }
 20,904,098 ( 0.51%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 152){
  4,577,378 ( 0.11%) 0          0           2,288,689 ( 0.29%)       0                0                   0                0                0                       counts[2]++;
          .          .          .                   .                .                .                   .                .                .                   }
 16,326,720 ( 0.40%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 203){
 15,375,586 ( 0.37%) 0          0           7,687,793 ( 0.96%)       0                0                   0                0                0                       counts[3]++;
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .                   else{
    951,134 ( 0.02%) 2 ( 0.02%) 2 ( 0.03%)    475,567 ( 0.06%)       0                0                   0                0                0                       counts[4]++;
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .               ofstream text("out.txt");
         38 ( 0.00%) 6 ( 0.07%) 6 ( 0.09%)         10 ( 0.00%)       0                0                  10 ( 0.00%)       0                0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
          .          .          .                   .                .                .                   .                .                .               text.close();
          .          .          .                   .                .                .                   .                .                .           
         12 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          4 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               delete[] piccel;
          4 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               delete[] res;
          .          .          .                   .                .                .                   .                .                .               ifs.close();
          .          .          .                   .                .                .                   .                .                .               ofs.close();
         22 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)         18 ( 0.00%)       4 ( 0.00%)       2 ( 0.00%)          0                0                0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/decrease_for5.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr             DLmr             Dw                  D1mw             DLmw             

-- line 2 ----------------------------------------
          .          .          .                   .                .                .                   .                .                .           #include <fstream>
          .          .          .                   .                .                .                   .                .                .           #include <iomanip>
          .          .          .                   .                .                .                   .                .                .           #include <cmath>
          .          .          .                   .                .                .                   .                .                .           #include "struct.h"
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .           using namespace std;
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .           
 16,027,752 ( 0.39%) 4 ( 0.05%) 4 ( 0.06%)          2 ( 0.00%)       0                0                  14 ( 0.00%)       0                0           void convolution_dec_for5(const string& in_file){
          .          .          .                   .                .                .                   .                .                .               ifstream ifs(in_file, ios::binary);
          .          .          .                   .                .                .                   .                .                .               ofstream ofs("out.ppm", ios::binary);
          8 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          4 ( 0.00%)       0                0                   0                0                0               if(!ifs || !ofs){
          .          .          .                   .                .                .                   .                .                .                   if(!ifs){
          .          .          .                   .                .                .                   .                .                .                       ifs.close();
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .                   return ;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               PPMFileHeader file_header;
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               char magic[3];
          .          .          .                   .                .                .                   .                .                .           
         10 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               ifs.read((char*)&magic, 3);
          8 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               ofs.write((char*)&magic, 3);
          4 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          2 ( 0.00%)       0                0                   0                0                0               if(!ifs){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   0                0                0               if(ofs.bad()){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          8 ( 0.00%) 0          0                   4 ( 0.00%)       0                0                   0                0                0               if(magic[0] != 'P' || magic[1] != '6'){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               string line;
          .          .          .                   .                .                .                   .                .                .               uint16_t max;
         12 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               while(ifs.peek() == '#'){
          .          .          .                   .                .                .                   .                .                .                   getline(ifs, line);
          .          .          .                   .                .                .                   .                .                .                   ofs.write(line.c_str(), line.size());
          .          .          .                   .                .                .                   .                .                .               }
         20 ( 0.00%) 4 ( 0.05%) 4 ( 0.06%)          4 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               if(!(ifs >> file_header.width >> file_header.height >> max)){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "header read error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          4 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   0                0                0               if(max != 255){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "max value error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          4 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   2 ( 0.00%)       0                0               ifs.get();
         16 ( 0.00%) 0          0                   4 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
          .          .          .                   .                .                .                   .                .                .               
          .          .          .                   .                .                .                   .                .                .           
          8 ( 0.00%) 0          0                   4 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               int pixcel_color_count = file_header.width * file_header.height* 3;
          8 ( 0.00%) 0          0                   0                0                0                   4 ( 0.00%)       0                0               uint8_t* piccel = new uint8_t[pixcel_color_count];
          6 ( 0.00%) 0          0                   0                0                0                   4 ( 0.00%)       0                0               uint8_t* res = new uint8_t[pixcel_color_count];
         12 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          2 ( 0.00%)       0                0                   8 ( 0.00%)       2 ( 0.00%)       1 ( 0.00%)      int counts[5] = {0, 0, 0, 0, 0};
          .          .          .                   .                .                .                   .                .                .           
         10 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          2 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
          8 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               if(!ifs){
          .          .          .                   .                .                .                   .                .                .                   ifs.close();
          .          .          .                   .                .                .                   .                .                .                   ofs.close();
          .          .          .                   .                .                .                   .                .                .                   cout << "piccel read error" << endl;
          .          .          .                   .                .                .                   .                .                .                   return;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .           
     50,064 ( 0.00%) 0          0              15,016 ( 0.00%)       0                0                   4 ( 0.00%)       0                0               for(int i = 1; i < file_header.height-1; i++){
112,294,196 ( 2.72%) 8 ( 0.09%) 8 ( 0.11%)     10,014 ( 0.00%)       0                0              20,022 ( 0.01%)       0                0                   for(int j = 1; j < file_header.width-1; j++){
176,325,024 ( 4.27%) 2 ( 0.02%) 2 ( 0.03%)     20,016 ( 0.00%)   9,212 ( 0.15%)       2 ( 0.00%)          0                0                0                       for(int c = 0; c < 3; c++){
 48,083,184 ( 1.17%) 0          0                   0                0                0                   0                0                0                           int16_t tmp = 
 48,083,184 ( 1.17%) 0          0          48,083,184 ( 6.02%)       0                0                   0                0                0                               -(int16_t)piccel[((j-1) + file_header.width* (i))*3 + c]
144,249,552 ( 3.50%) 2 ( 0.02%) 2 ( 0.03%) 48,083,184 ( 6.02%)       1 ( 0.00%)       1 ( 0.00%)          0                0                0                               +(int16_t)5* (int16_t)piccel[(j + file_header.width* i)*3 + c] 
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%) 746,172 (11.93%)     161 ( 0.01%)          0                0                0                               -(int16_t)piccel[((j+1) + file_header.width* (i))*3 + c]
          .          .          .                   .                .                .                   .                .                .                             
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%) 746,049 (11.93%)      34 ( 0.00%)          0                0                0                               -(int16_t)piccel[(j + file_header.width* (i-1))*3 + c]
 96,166,368 ( 2.33%) 0          0          48,083,184 ( 6.02%) 751,670 (12.02%) 746,173 (23.96%)          0                0                0                               -(int16_t)piccel[(j + file_header.width* (i+1))*3 + c];
          .          .          .                   .                .                .                   .                .                .                           if(tmp > 255){
          .          .          .                   .                .                .                   .                .                .                               tmp = 255;
          .          .          .                   .                .                .                   .                .                .                           }
144,249,552 ( 3.50%) 0          0                   0                0                0                   0                0                0                           else if(tmp < 0){
          .          .          .                   .                .                .                   .                .                .                               tmp = 0;
          .          .          .                   .                .                .                   .                .                .                           }
192,332,736 ( 4.66%) 0          0                   0                0                0          48,083,184 (35.65%) 751,771 (46.11%) 746,173 (46.88%)                  res[(j + file_header.width* i)*3 + c] = tmp;
          .          .          .                   .                .                .                   .                .                .                       }
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .            
          .          .          .                   .                .                .                   .                .                .           
     28,816 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          8 ( 0.00%)       2 ( 0.00%)       1 ( 0.00%)          0                0                0               for(int i = 0; i < file_header.height; i++){
     60,096 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   0                0                0                   for(int c = 0; c< 3; c++){
          .          .          .                   .                .                .                   .                .                .                       int index = (file_header.width* i)*3 + c;
     30,048 ( 0.00%) 0          0              15,024 ( 0.00%)      26 ( 0.00%)       1 ( 0.00%)     15,024 ( 0.01%)      27 ( 0.00%)       1 ( 0.00%)              res[index] = piccel[index];
          .          .          .                   .                .                .                   .                .                .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
     30,048 ( 0.00%) 0          0              15,024 ( 0.00%)   5,008 ( 0.08%)   4,608 ( 0.15%)     15,024 ( 0.01%)   5,008 ( 0.31%)   4,608 ( 0.29%)              res[index1] = piccel[index1];
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
     26,306 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          6 ( 0.00%)       3 ( 0.00%)       1 ( 0.00%)          0                0                0               for(int j = 0; j < file_header.width; j++){
     37,560 ( 0.00%) 0          0                   0                0                0                   0                0                0                   for(int c = 0; c< 3; c++){
          .          .          .                   .                .                .                   .                .                .                       int index = (j)*3 + c;
     22,536 ( 0.00%) 0          0              11,268 ( 0.00%)     178 ( 0.00%)     163 ( 0.01%)     11,268 ( 0.01%)     178 ( 0.01%)     163 ( 0.01%)              res[index] = piccel[index];
         18 ( 0.00%) 0          0                   0                0                0                   0                0                0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
     22,536 ( 0.00%) 0          0              11,268 ( 0.00%)     175 ( 0.00%)      80 ( 0.00%)     11,268 ( 0.01%)     175 ( 0.01%)     161 ( 0.01%)              res[index2] = piccel[index2];
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .             
 48,135,760 ( 1.17%) 0          0                   4 ( 0.00%)       1 ( 0.00%)       0                   0                0                0               for(int i = 0; i < pixcel_color_count/3; i++){
240,678,720 ( 5.83%) 2 ( 0.02%) 2 ( 0.03%) 96,271,488 (12.05%) 751,984 (12.02%) 746,336 (23.96%)          0                0                0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
 16,045,248 ( 0.39%) 2 ( 0.02%) 2 ( 0.03%)          0                0                0                   0                0                0                   uint8_t roundedColor = (uint8_t)std::round(color);
 32,090,496 ( 0.78%) 0          0                   0                0                0                   0                0                0                   if(roundedColor <= 50){
  5,240,100 ( 0.13%) 0          0           2,620,050 ( 0.33%)       0                0                   0                0                0                       counts[0]++;
          .          .          .                   .                .                .                   .                .                .                   }
 26,850,396 ( 0.65%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 101){
  2,973,149 ( 0.07%) 0          0           2,973,149 ( 0.37%)       0                0                   0                0                0                       counts[1]++;
          .          .          .                   .                .                .                   .                .                .                   }
 20,904,098 ( 0.51%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 152){
  4,577,378 ( 0.11%) 0          0           2,288,689 ( 0.29%)       0                0                   0                0                0                       counts[2]++;
          .          .          .                   .                .                .                   .                .                .                   }
 16,326,720 ( 0.40%) 0          0                   0                0                0                   0                0                0                   else if(roundedColor <= 203){
 15,375,586 ( 0.37%) 0          0           7,687,793 ( 0.96%)       0                0                   0                0                0                       counts[3]++;
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .                   else{
    951,134 ( 0.02%) 0          0             475,567 ( 0.06%)       0                0                   0                0                0                       counts[4]++;
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .               ofstream text("out.txt");
         38 ( 0.00%) 6 ( 0.07%) 6 ( 0.09%)         10 ( 0.00%)       0                0                  10 ( 0.00%)       0                0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
          .          .          .                   .                .                .                   .                .                .               text.close();
          .          .          .                   .                .                .                   .                .                .           
         12 ( 0.00%) 0          0                   4 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
          4 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)          2 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               delete[] piccel;
          4 ( 0.00%) 0          0                   0                0                0                   2 ( 0.00%)       0                0               delete[] res;
          .          .          .                   .                .                .                   .                .                .               ifs.close();
          .          .          .                   .                .                .                   .                .                .               ofs.close();
         22 ( 0.00%) 4 ( 0.05%) 3 ( 0.04%)         18 ( 0.00%)       4 ( 0.00%)       2 ( 0.00%)          0                0                0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/decrease_for3.cpp
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr               D1mr            DLmr           Dw               D1mw            DLmw           

-- line 2 ----------------------------------------
        .          .          .                .               .              .                .               .              .           #include <fstream>
        .          .          .                .               .              .                .               .              .           #include <iomanip>
        .          .          .                .               .              .                .               .              .           #include <cmath>
        .          .          .                .               .              .                .               .              .           #include "struct.h"
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           using namespace std;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
       12 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                7 ( 0.00%)      0              0           void convolution_dec_for3(const string& in_file){
        .          .          .                .               .              .                .               .              .               ifstream ifs(in_file, ios::binary);
        .          .          .                .               .              .                .               .              .               ofstream ofs("out.ppm", ios::binary);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                0               0              0               if(!ifs || !ofs){
        .          .          .                .               .              .                .               .              .                   if(!ifs){
        .          .          .                .               .              .                .               .              .                       ifs.close();
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   return ;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               PPMFileHeader file_header;
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               char magic[3];
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ifs.read((char*)&magic, 3);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ofs.write((char*)&magic, 3);
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                0               0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(ofs.bad()){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                0               0              0               if(magic[0] != 'P' || magic[1] != '6'){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .               string line;
        .          .          .                .               .              .                .               .              .               uint16_t max;
        6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               while(ifs.peek() == '#'){
        .          .          .                .               .              .                .               .              .                   getline(ifs, line);
        .          .          .                .               .              .                .               .              .                   ofs.write(line.c_str(), line.size());
        .          .          .                .               .              .                .               .              .               }
       10 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               if(!(ifs >> file_header.width >> file_header.height >> max)){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "header read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0              0               if(max != 255){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "max value error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0              0               ifs.get();// one caracter '\n'
        .          .          .                .               .              .                .               .              .           
        8 ( 0.00%) 0          0                2 ( 0.00%)      0              0                2 ( 0.00%)      0              0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
        .          .          .                .               .              .                .               .              .           
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                0               0              0               int pixcel_color_count = file_header.width * file_header.height* 3;
        .          .          .                .               .              .                .               .              .           
        5 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0              0               uint8_t* piccel = new uint8_t[pixcel_color_count];
        6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                2 ( 0.00%)      0              0               int16_t* piccel2 = new int16_t[pixcel_color_count];
        6 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0              0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               if(!ifs){
        .          .          .                .               .              .                .               .              .                   ifs.close();
        .          .          .                .               .              .                .               .              .                   ofs.close();
        .          .          .                .               .              .                .               .              .                   cout << "piccel read error" << endl;
        .          .          .                .               .              .                .               .              .                   return;
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               // multiply by 5
    3,203 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)     798 ( 0.00%)      0              0                6 ( 0.00%)      0              0               for(int i = 1; i < file_header.height-1; i++){
  956,006 ( 0.02%) 2 ( 0.02%) 2 ( 0.03%) 119,404 ( 0.01%)      0              0            1,593 ( 0.00%)      0              0                   for(int j = 1; j < file_header.width-1; j++){
2,016,268 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 237,208 ( 0.03%)      0              0                0               0              0                       for(int c = 0; c < 3; c++){
        .          .          .                .               .              .                .               .              .                           int index = (j + file_header.width* i)*3 + c;
1,036,522 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0          324,898 ( 0.24%) 10,290 ( 0.63%) 7,780 ( 0.49%)                  piccel2[index] = 
        .          .          .                .               .              .                .               .              .                               (int16_t)5* (int16_t)piccel[index] 
1,425,238 ( 0.03%) 0          0          713,216 ( 0.09%)      0              0          118,604 ( 0.09%)      0              0                               -(int16_t)piccel[((j+1) + file_header.width* (i))*3 + c]
1,067,436 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%) 355,812 ( 0.04%)      0              0                0               0              0                               -(int16_t)piccel[((j-1) + file_header.width* (i))*3 + c]
  711,624 ( 0.02%) 0          0          355,812 ( 0.04%)      0              0                0               0              0                               -(int16_t)piccel[(j + file_header.width* (i-1))*3 + c]
  711,624 ( 0.02%) 0          0          355,812 ( 0.04%)  5,497 ( 0.09%) 5,497 ( 0.18%)       0               0              0                               -(int16_t)piccel[(j + file_header.width* (i+1))*3 + c];
  711,624 ( 0.02%) 0          0                0               0              0                0               0              0                           if(piccel2[index] > 255){
   16,780 ( 0.00%) 0          0                0               0              0            8,390 ( 0.01%)    265 ( 0.02%)   195 ( 0.01%)                      piccel2[index] = 255;
        .          .          .                .               .              .                .               .              .                           }
  694,844 ( 0.02%) 0          0                0               0              0                0               0              0                           else if(piccel2[index] < 0){
   45,048 ( 0.00%) 0          0                0               0              0           22,524 ( 0.02%)    640 ( 0.04%)   495 ( 0.03%)                      piccel2[index] = 0;
        .          .          .                .               .              .                .               .              .                           }
        .          .          .                .               .              .                .               .              .                       }
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .            
        .          .          .                .               .              .                .               .              .           
    3,116 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       4 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int i = 0; i < file_header.height; i++){
    4,000 ( 0.00%) 0          0                0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (file_header.width* i)*3 + c;
    2,400 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)   1,200 ( 0.00%)     25 ( 0.00%)     3 ( 0.00%)   1,200 ( 0.00%)     51 ( 0.00%)     0                       piccel2[index] = piccel[index];
        .          .          .                .               .              .                .               .              .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)    400 ( 0.01%)    32 ( 0.00%)   1,200 ( 0.00%)    400 ( 0.02%)     1 ( 0.00%)              piccel2[index1] = piccel[index1];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
    2,107 ( 0.00%) 0          0                3 ( 0.00%)      2 ( 0.00%)     1 ( 0.00%)       0               0              0               for(int j = 0; j < file_header.width; j++){
    3,000 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                0               0              0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .              .                       int index = (j)*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     15 ( 0.00%)    13 ( 0.00%)     900 ( 0.00%)     29 ( 0.00%)    27 ( 0.00%)              piccel2[index] = piccel[index];
  240,010 ( 0.01%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)       0               0              0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     13 ( 0.00%)     0              900 ( 0.00%)     27 ( 0.00%)    27 ( 0.00%)              piccel2[index2] = piccel[index2];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                3 ( 0.00%)      0              0               int counts[5] = {0, 0, 0, 0, 0};
        .          .          .                .               .              .                .               .              .           
        4 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0              0               uint8_t* res = new uint8_t[pixcel_color_count];
  480,007 ( 0.01%) 0          0                1 ( 0.00%)      0              0                0               0              0               for(int i = 0; i < pixcel_color_count/3; i++){
1,080,000 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                0               0              0                   for(int c = 0; c < 3; c++){
  720,000 ( 0.02%) 0          0          360,000 ( 0.05%) 11,222 ( 0.18%) 6,173 ( 0.20%) 360,000 ( 0.27%)  5,625 ( 0.34%) 5,625 ( 0.35%)              res[i*3 + c] = piccel2[i*3 + c];
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .           
1,800,000 ( 0.04%) 1 ( 0.01%) 1 ( 0.01%) 720,000 ( 0.09%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
  120,000 ( 0.00%) 0          0                0               0              0                0               0              0                   uint8_t roundedColor = (uint8_t)std::round(color);
  240,000 ( 0.01%) 0          0                0               0              0                0               0              0                   if(roundedColor <= 50){
   48,864 ( 0.00%) 0          0                0               0              0                0               0              0                       counts[0]++;
        .          .          .                .               .              .                .               .              .                   }
  191,136 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 101){
   16,307 ( 0.00%) 0          0           16,307 ( 0.00%)      0              0                0               0              0                       counts[1]++;
        .          .          .                .               .              .                .               .              .                   }
  158,522 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 152){
   30,384 ( 0.00%) 0          0           15,192 ( 0.00%)      0              0                0               0              0                       counts[2]++;
        .          .          .                .               .              .                .               .              .                   }
  128,138 ( 0.00%) 0          0                0               0              0                0               0              0                   else if(roundedColor <= 203){
  109,194 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)  54,597 ( 0.01%)      0              0                0               0              0                       counts[3]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .                   else{
   18,944 ( 0.00%) 0          0            9,472 ( 0.00%)      0              0                0               0              0                       counts[4]++;
        .          .          .                .               .              .                .               .              .                   }
        .          .          .                .               .              .                .               .              .               }
        .          .          .                .               .              .                .               .              .               ofstream text("out.txt");
       19 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       4 ( 0.00%)      0              0                5 ( 0.00%)      0              0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
        .          .          .                .               .              .                .               .              .               text.close();
        .          .          .                .               .              .                .               .              .           
        6 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0              0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel;
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                1 ( 0.00%)      0              0               delete[] piccel2;
        2 ( 0.00%) 0          0                0               0              0                1 ( 0.00%)      0              0               delete[] res;
        .          .          .                .               .              .                .               .              .               ifs.close();
        .          .          .                .               .              .                .               .              .               ofs.close();
        .          .          .                .               .              .                .               .              .           
       11 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       9 ( 0.00%)      2 ( 0.00%)     2 ( 0.00%)       0               0              0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/conv1.cpp
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr                 D1mr           DLmr       Dw                 D1mw            DLmw           

-- line 2 ----------------------------------------
         .          .          .                  .              .          .                  .               .              .           #include <fstream>
         .          .          .                  .              .          .                  .               .              .           #include <iomanip>
         .          .          .                  .              .          .                  .               .              .           #include <cmath>
         .          .          .                  .              .          .                  .               .              .           #include <vector>
         .          .          .                  .              .          .                  .               .              .           #include "struct.h"
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .           using namespace std;
         .          .          .                  .              .          .                  .               .              .           
        12 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)         1 ( 0.00%)     0          0                  7 ( 0.00%)      0              0           void convolution1(const string& in_file){
         .          .          .                  .              .          .                  .               .              .               ifstream ifs(in_file, ios::binary);
         .          .          .                  .              .          .                  .               .              .               ofstream ofs("out.ppm", ios::binary);
         4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         2 ( 0.00%)     0          0                  0               0              0               if(!ifs || !ofs){
         .          .          .                  .              .          .                  .               .              .                   if(!ifs){
         .          .          .                  .              .          .                  .               .              .                       ifs.close();
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .                   cout << "file open error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return ;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .               
         .          .          .                  .              .          .                  .               .              .               char magic[3];
         5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  1 ( 0.00%)      0              0               ifs.read((char*)&magic, 3);
         4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  1 ( 0.00%)      0              0               ofs.write((char*)&magic, 3);
         2 ( 0.00%) 0          0                  1 ( 0.00%)     0          0                  0               0              0               if(!ifs){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "magic read error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         2 ( 0.00%) 0          0                  1 ( 0.00%)     0          0                  0               0              0               if(ofs.bad()){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "magic write error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         2 ( 0.00%)     0          0                  0               0              0               if(magic[0] != 'P' || magic[1] != '6'){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "magic number error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .               PPMFileHeader file_header;
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .               string line;
         .          .          .                  .              .          .                  .               .              .               uint16_t max;
         6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  1 ( 0.00%)      0              0               while(ifs.peek() == '#'){
         .          .          .                  .              .          .                  .               .              .                   getline(ifs, line);
         .          .          .                  .              .          .                  .               .              .                   ofs.write(line.c_str(), line.size());
         .          .          .                  .              .          .                  .               .              .               }
        11 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)         1 ( 0.00%)     0          0                  3 ( 0.00%)      0              0               if(!(ifs >> file_header.width >> file_header.height >> max)){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "header read error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .              
         .          .          .                  .              .          .                  .               .              .           
         2 ( 0.00%) 0          0                  1 ( 0.00%)     0          0                  0               0              0               if(max != 255){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "max value error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  1 ( 0.00%)      0              0               ifs.get();// one caracter '\n'
         .          .          .                  .              .          .                  .               .              .           
         8 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         2 ( 0.00%)     0          0                  2 ( 0.00%)      0              0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .           
         5 ( 0.00%) 0          0                  2 ( 0.00%)     0          0                  2 ( 0.00%)      0              0               int pixcel_color_count = file_header.width * file_header.height* 3;
         .          .          .                  .              .          .                  .               .              .           
         4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  3 ( 0.00%)      0              0                std::streampos storedPosition = ifs.tellg();
         .          .          .                  .              .          .                  .               .              .               
         4 ( 0.00%) 0          0                  2 ( 0.00%)     0          0                  0               0              0               vector<vector<uint8_t>> col_adjecent(file_header.height, vector<uint8_t>(file_header.width*3));
         4 ( 0.00%) 0          0                  2 ( 0.00%)     0          0                  0               0              0               vector<vector<uint8_t>> row_adjecent(file_header.width, vector<uint8_t>(file_header.height*3));
   122,804 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       402 ( 0.00%)     2 ( 0.00%) 0                  0               0              0               for(int i = 0; i < file_header.height; i++){
     1,200 ( 0.00%) 0          0                400 ( 0.00%)     0          0                  0               0              0                   col_adjecent[i].resize(file_header.width*3);
     2,803 ( 0.00%) 0          0              1,200 ( 0.00%)     0          0                401 ( 0.00%)      0              0                   ifs.read((char*) &col_adjecent[i][0], file_header.width*3);
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
     1,606 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       401 ( 0.00%)     0          0                  0               0              0               for(int i = 0; i < file_header.height; i++){
   721,200 ( 0.02%) 1 ( 0.01%) 1 ( 0.01%)   120,400 ( 0.02%)     0          0                  0               0              0                   for(int j = 0; j < file_header.width; j++){
 1,320,000 ( 0.03%) 0          0                  0              0          0                  0               0              0                       for(int c = 0; c < 3; c++){
 2,162,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 1,440,000 ( 0.18%) 8,116 ( 0.13%) 1 ( 0.00%)   360,000 ( 0.27%) 11,944 ( 0.73%)     0                           row_adjecent[j][i*3+c] = col_adjecent[i][j*3 + c];
         .          .          .                  .              .          .                  .               .              .                       }
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .           
         .          .          .                  .              .          .                  .               .              .           
         5 ( 0.00%) 0          0                  1 ( 0.00%)     1 ( 0.00%) 0                  2 ( 0.00%)      1 ( 0.00%)     0               uint8_t* piccel = new uint8_t[pixcel_color_count];
         .          .          .                  .              .          .                  .               .              .               // int16_t* piccel2 = new int16_t[pixcel_color_count];
         3 ( 0.00%) 0          0                  0              0          0                  1 ( 0.00%)      0              0               uint8_t* res = new uint8_t[pixcel_color_count];
         4 ( 0.00%) 0          0                  2 ( 0.00%)     0          0                  1 ( 0.00%)      0              0               ifs.seekg(storedPosition);
         5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         1 ( 0.00%)     0          0                  2 ( 0.00%)      0              0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
         4 ( 0.00%) 0          0                  1 ( 0.00%)     0          0                  1 ( 0.00%)      0              0               if(!ifs){
         .          .          .                  .              .          .                  .               .              .                   ifs.close();
         .          .          .                  .              .          .                  .               .              .                   ofs.close();
         .          .          .                  .              .          .                  .               .              .                   cout << "piccel read error" << endl;
         .          .          .                  .              .          .                  .               .              .                   return;
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               // multiply by 5
     2,401 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       399 ( 0.00%)     0          0                  4 ( 0.00%)      0              0                for(int i = 1; i < file_header.height-1; i++){
 1,189,625 ( 0.03%) 2 ( 0.02%) 2 ( 0.03%)   356,611 ( 0.04%)     0          0                398 ( 0.00%)      0              0                    for(int j = 1; j < file_header.width-1; j++){
 1,897,664 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%)   355,812 ( 0.04%)     0          0                  0               0              0                        for(int c = 0; c < 3; c++){
 2,609,686 ( 0.06%) 0          0                398 ( 0.00%)     0          0          1,067,436 ( 0.79%)      0              0                           int16_t tmp = 0;
 3,558,120 ( 0.09%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  0               0              0                           for(int row = -1; row <= 1; row++){
14,944,104 ( 0.36%) 0          0                  0              0          0                  0               0              0                               for(int col = -1; col <= 1; col++){
13,520,856 ( 0.33%) 0          0                  0              0          0                  0               0              0                                   if(row != 0 && col != 0){
         .          .          .                  .              .          .                  .               .              .                                       continue;
         .          .          .                  .              .          .                  .               .              .                                   }
10,674,360 ( 0.26%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  0               0              0                                   uint mult = (row == 0 && col == 0) ? 5 : -1;
11,030,172 ( 0.27%) 1 ( 0.01%) 1 ( 0.01%) 3,558,120 ( 0.45%) 5,851 ( 0.09%) 0                  0               0              0                                   tmp += mult * (int16_t)col_adjecent[i+row][(j+col)*3 + c];
         .          .          .                  .              .          .                  .               .              .                               }
         .          .          .                  .              .          .                  .               .              .                           }
         .          .          .                  .              .          .                  .               .              .                           if(tmp > 255) tmp = 255;
 2,134,872 ( 0.05%) 0          0            711,624 ( 0.09%)     0          0                  0               0              0                           else if(tmp < 0) tmp = 0;
         .          .          .                  .              .          .                  .               .              .           
 1,423,248 ( 0.03%) 0          0                  0              0          0            355,812 ( 0.26%)  5,598 ( 0.34%) 5,598 ( 0.35%)                  res[(j + file_header.width* i)*3 + c] = tmp;
         .          .          .                  .              .          .                  .               .              .                       }
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               // first row
     2,002 ( 0.00%) 0          0                  0              0          0                  0               0              0               for(int i = 0; i < file_header.height; i++){
     4,000 ( 0.00%) 0          0                  0              0          0                  0               0              0                   for(int c = 0; c< 3; c++){
         1 ( 0.00%) 0          0                  1 ( 0.00%)     0          0                  0               0              0                       int index = (0 + file_header.width* i)*3 + c;
     3,600 ( 0.00%) 0          0              2,400 ( 0.00%)    21 ( 0.00%) 0              1,200 ( 0.00%)    396 ( 0.02%)     0                       res[index] = row_adjecent[0][i*3 + c];
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               // last row
     2,000 ( 0.00%) 0          0                  0              0          0                  0               0              0               for(int i = 0; i < file_header.height; i++){
     4,000 ( 0.00%) 0          0                  0              0          0                  0               0              0                   for(int c = 0; c< 3; c++){
         1 ( 0.00%) 0          0                  0              0          0                  0               0              0                       int index = ((file_header.width-1) + file_header.width* i)*3 + c;
     3,601 ( 0.00%) 0          0              2,400 ( 0.00%)    21 ( 0.00%) 9 ( 0.00%)     1,200 ( 0.00%)     41 ( 0.00%)     0                       res[index] = row_adjecent[(file_header.width-1)][i*3 + c];
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               // first col
     1,203 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         1 ( 0.00%)     0          0                  0               0              0               for(int j = 0; j < file_header.width; j++){
     3,000 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  0               0              0                   for(int c = 0; c< 3; c++){
         .          .          .                  .              .          .                  .               .              .                       int index = (j + file_header.width* 0)*3 + c;
     2,700 ( 0.00%) 0          0              1,800 ( 0.00%)    16 ( 0.00%) 0                900 ( 0.00%)     13 ( 0.00%)    13 ( 0.00%)              res[index] = col_adjecent[0][j*3 + c];
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               // last col
     1,500 ( 0.00%) 0          0                  0              0          0                  0               0              0               for(int j = 0; j < file_header.width; j++){
     3,000 ( 0.00%) 0          0                  0              0          0                  0               0              0                   for(int c = 0; c< 3; c++){
         4 ( 0.00%) 0          0                  0              0          0                  0               0              0                       int index = (j + file_header.width* (file_header.height-1))*3 + c;
     3,602 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)     1,801 ( 0.00%)     9 ( 0.00%) 0                900 ( 0.00%)     13 ( 0.00%)    13 ( 0.00%)              res[index] = col_adjecent[(file_header.height-1)][j*3 + c];
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               
         .          .          .                  .              .          .                  .               .              .           
         6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         1 ( 0.00%)     0          0                  3 ( 0.00%)      0              0               int counts[5] = {0, 0, 0, 0, 0};
         .          .          .                  .              .          .                  .               .              .           
   480,008 ( 0.01%) 0          0            120,001 ( 0.02%)     0          0                  1 ( 0.00%)      0              0               for(int i = 0; i < pixcel_color_count/3; i++){
         .          .          .                  .              .          .                  .               .              .           
 1,680,000 ( 0.04%) 1 ( 0.01%) 1 ( 0.01%)   720,000 ( 0.09%) 5,610 ( 0.09%) 2 ( 0.00%)         0               0              0                   double color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
         .          .          .                  .              .          .                  .               .              .           
   240,000 ( 0.01%) 0          0                  0              0          0            120,000 ( 0.09%)      1 ( 0.00%)     0                   int roundedColor = static_cast<int>(std::round(color));
         .          .          .                  .              .          .                  .               .              .           
   240,000 ( 0.01%) 0          0                  0              0          0                  0               0              0                   if(roundedColor <= 50){
    97,728 ( 0.00%) 0          0                  0              0          0                  0               0              0                       counts[0]++;
         .          .          .                  .              .          .                  .               .              .                   }
   191,136 ( 0.00%) 0          0                  0              0          0                  0               0              0                   else if(roundedColor <= 101){
    16,307 ( 0.00%) 0          0             16,307 ( 0.00%)     0          0                  0               0              0                       counts[1]++;
         .          .          .                  .              .          .                  .               .              .                   }
   158,522 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         0              0          0                  0               0              0                   else if(roundedColor <= 152){
    30,384 ( 0.00%) 0          0             15,192 ( 0.00%)     0          0                  0               0              0                       counts[2]++;
         .          .          .                  .              .          .                  .               .              .                   }
   128,138 ( 0.00%) 0          0                  0              0          0                  0               0              0                   else if(roundedColor <= 203){
   109,194 ( 0.00%) 0          0             54,597 ( 0.01%)     0          0                  0               0              0                       counts[3]++;
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .                   else{
    18,944 ( 0.00%) 0          0              9,472 ( 0.00%)     0          0                  0               0              0                       counts[4]++;
         .          .          .                  .              .          .                  .               .              .                   }
         .          .          .                  .              .          .                  .               .              .               }
         .          .          .                  .              .          .                  .               .              .               ofstream text("out.txt");
        19 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)         4 ( 0.00%)     0          0                  5 ( 0.00%)      0              0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
         .          .          .                  .              .          .                  .               .              .              
         .          .          .                  .              .          .                  .               .              .               text.close();
         .          .          .                  .              .          .                  .               .              .           
         5 ( 0.00%) 0          0                  1 ( 0.00%)     1 ( 0.00%) 1 ( 0.00%)         1 ( 0.00%)      0              0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
         2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)         1 ( 0.00%)     0          0                  1 ( 0.00%)      0              0               delete[] piccel;
         .          .          .                  .              .          .                  .               .              .               // delete[] piccel2;
         2 ( 0.00%) 0          0                  0              0          0                  1 ( 0.00%)      0              0               delete[] res;
         .          .          .                  .              .          .                  .               .              .               ifs.close();
         .          .          .                  .              .          .                  .               .              .               ofs.close();
         .          .          .                  .              .          .                  .               .              .           
        11 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)         9 ( 0.00%)     2 ( 0.00%) 2 ( 0.00%)         0               0              0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/12/cmath
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr         D1mr       DLmr       Dw                  D1mw       DLmw       

-- line 1749 ----------------------------------------
         .          .          .          .          .          .                   .          .          .                                                         double>::__type
         .          .          .          .          .          .                   .          .          .               rint(_Tp __x)
         .          .          .          .          .          .                   .          .          .               { return __builtin_rint(__x); }
         .          .          .          .          .          .                   .          .          .           #endif
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
         .          .          .          .          .          .                   .          .          .             constexpr float
         .          .          .          .          .          .                   .          .          .             round(float __x)
32,570,496 ( 0.79%) 0          0          0          0          0          32,570,496 (24.15%) 0          0             { return __builtin_roundf(__x); }
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .             constexpr long double
         .          .          .          .          .          .                   .          .          .             round(long double __x)
         .          .          .          .          .          .                   .          .          .             { return __builtin_roundl(__x); }
         .          .          .          .          .          .                   .          .          .           #endif
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
         .          .          .          .          .          .                   .          .          .             template<typename _Tp>
-- line 1765 ----------------------------------------

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/main.cpp
--------------------------------------------------------------------------------
Ir                 I1mr       ILmr       Dr               D1mr            DLmr           Dw               D1mw            DLmw            

-- line 2 ----------------------------------------
        .          .          .                .               .              .                .               .               .           #include <fstream>
        .          .          .                .               .              .                .               .               .           #include <iomanip>
        .          .          .                .               .              .                .               .               .           #include <cmath>
        .          .          .                .               .              .                .               .               .           #include "struct.h"
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           using namespace std;
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           
  118,616 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       1 ( 0.00%)      0              0                7 ( 0.00%)      0               0           void convolution(const string& in_file){
        .          .          .                .               .              .                .               .               .               ifstream ifs(in_file, ios::binary);
        .          .          .                .               .              .                .               .               .               ofstream ofs("out.ppm", ios::binary);
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                0               0               0               if(!ifs || !ofs){
        .          .          .                .               .              .                .               .               .                   if(!ifs){
        .          .          .                .               .              .                .               .               .                       ifs.close();
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .                   return ;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .               PPMFileHeader file_header;
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .               char magic[3];
        .          .          .                .               .              .                .               .               .           
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0               0               ifs.read((char*)&magic, 3);
        4 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       0               0              0                1 ( 0.00%)      0               0               ofs.write((char*)&magic, 3);
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0               0               if(!ifs){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0               0               if(ofs.bad()){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                0               0               0               if(magic[0] != 'P' || magic[1] != '6'){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .               string line;
        .          .          .                .               .              .                .               .               .               uint16_t max;
        6 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0               0               while(ifs.peek() == '#'){
        .          .          .                .               .              .                .               .               .                   getline(ifs, line);
        .          .          .                .               .              .                .               .               .                   ofs.write(line.c_str(), line.size());
        .          .          .                .               .              .                .               .               .               }
       10 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0               0               if(!(ifs >> file_header.width >> file_header.height >> max)){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   cout << "header read error" << endl;
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                0               0               0               if(max != 255){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   cout << "max value error" << endl;
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                1 ( 0.00%)      0               0               ifs.get();// one caracter '\n'
        .          .          .                .               .              .                .               .               .           
        8 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       2 ( 0.00%)      0              0                2 ( 0.00%)      0               0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           
        4 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      1 ( 0.00%)      0               int pixcel_color_count = file_header.width * file_header.height* 3;
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           
        5 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                3 ( 0.00%)      0               0               uint8_t* piccel = new uint8_t[pixcel_color_count];
        6 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0               0               int16_t* piccel2 = new int16_t[pixcel_color_count];
        6 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      0               0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
        4 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0               0               if(!ifs){
        .          .          .                .               .              .                .               .               .                   ifs.close();
        .          .          .                .               .              .                .               .               .                   ofs.close();
        .          .          .                .               .              .                .               .               .                   cout << "piccel read error" << endl;
        .          .          .                .               .              .                .               .               .                   return;
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               // multiply by 5
  121,001 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                3 ( 0.00%)      0               0               for(int i = 1; i < file_header.height-1; i++){
  596,608 ( 0.01%) 3 ( 0.04%) 3 ( 0.04%)     797 ( 0.00%)      0              0                0               0               0                   for(int j = 1; j < file_header.width-1; j++){
1,186,040 ( 0.03%) 0          0                0               0              0                0               0               0                       for(int c = 0; c < 3; c++){
        .          .          .                .               .              .                .               .               .                           int index = (j + file_header.width* i)*3 + c;
1,067,436 ( 0.03%) 0          0          355,812 ( 0.04%)  5,484 ( 0.09%) 5,484 ( 0.18%) 355,812 ( 0.26%) 11,195 ( 0.69%) 11,195 ( 0.70%)                  piccel2[index] = (int16_t)piccel[index] * (int16_t)5;
        .          .          .                .               .              .                .               .               .                       }
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .               // multiply by -1  from above
  120,994 ( 0.00%) 0          0                0               0              0                0               0               0               for(int i = 1; i < file_header.height-1; i++){
  597,400 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)     798 ( 0.00%)      0              0                0               0               0                   for(int j = 1; j < file_header.width-1; j++){
1,186,040 ( 0.03%) 0          0                0               0              0                0               0               0                       for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                           int index = (j + file_header.width* (i-1))*3 + c;
  711,624 ( 0.02%) 0          0          711,624 ( 0.09%) 16,793 ( 0.27%) 8,039 ( 0.26%)       0               0               0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[index];
        .          .          .                .               .              .                .               .               .                       }
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               // from below
  121,000 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0               0               for(int i = 1; i < file_header.height-1; i++){
  597,798 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)     798 ( 0.00%)      0              0              398 ( 0.00%)      0               0                   for(int j = 1; j < file_header.width-1; j++){
1,186,438 ( 0.03%) 0          0              398 ( 0.00%)      0              0                0               0               0                       for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                           int index = (j + file_header.width* (i+1))*3 + c;
  711,624 ( 0.02%) 0          0          711,624 ( 0.09%) 16,793 ( 0.27%) 7,577 ( 0.24%)       0               0               0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[index];
        .          .          .                .               .              .                .               .               .                       }
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               // from left
  120,997 ( 0.00%) 0          0                0               0              0                2 ( 0.00%)      0               0               for(int i = 1; i < file_header.height-1; i++){
  597,399 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)     797 ( 0.00%)      0              0                0               0               0                   for(int j = 1; j < file_header.width-1; j++){
1,186,040 ( 0.03%) 0          0                0               0              0                0               0               0                       for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                           int index = ((j+1) + file_header.width* (i))*3 + c;
  711,624 ( 0.02%) 0          0          711,624 ( 0.09%) 16,793 ( 0.27%) 7,801 ( 0.25%)       0               0               0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[index];
        .          .          .                .               .              .                .               .               .                       }
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               //frm right
    2,790 ( 0.00%) 0          0                0               0              0                0               0               0               for(int i = 1; i < file_header.height-1; i++){
  478,795 ( 0.01%) 2 ( 0.02%) 2 ( 0.03%)     797 ( 0.00%)      0              0                0               0               0                   for(int j = 1; j < file_header.width-1; j++){
1,304,644 ( 0.03%) 0          0                0               0              0                0               0               0                       for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                           int index = ((j-1) + file_header.width* (i))*3 + c;
  711,624 ( 0.02%) 0          0          711,624 ( 0.09%) 16,793 ( 0.27%) 7,801 ( 0.25%)       0               0               0                           piccel2[(j + file_header.width* i)*3 + c] -= (int16_t)piccel[index];
        .          .          .                .               .              .                .               .               .                       }
        .          .          .                .               .              .                .               .               .                   } 
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .           
    3,117 ( 0.00%) 2 ( 0.02%) 2 ( 0.03%)       5 ( 0.00%)      1 ( 0.00%)     1 ( 0.00%)       0               0               0               for(int i = 0; i < file_header.height; i++){
    4,000 ( 0.00%) 0          0                0               0              0                0               0               0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                       int index = (file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)     26 ( 0.00%)     3 ( 0.00%)   1,200 ( 0.00%)     51 ( 0.00%)      0                       piccel2[index] = piccel[index];
        .          .          .                .               .              .                .               .               .                       int index1 = ((file_header.width-1) + file_header.width* i)*3 + c;
    2,400 ( 0.00%) 0          0            1,200 ( 0.00%)    400 ( 0.01%)    33 ( 0.00%)   1,200 ( 0.00%)    400 ( 0.02%)      1 ( 0.00%)              piccel2[index1] = piccel[index1];
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
    2,107 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       3 ( 0.00%)      2 ( 0.00%)     1 ( 0.00%)       0               0               0               for(int j = 0; j < file_header.width; j++){
    3,000 ( 0.00%) 0          0                0               0              0                0               0               0                   for(int c = 0; c< 3; c++){
        .          .          .                .               .              .                .               .               .                       int index = (j)*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     15 ( 0.00%)    13 ( 0.00%)     900 ( 0.00%)     29 ( 0.00%)     27 ( 0.00%)              piccel2[index] = piccel[index];
        9 ( 0.00%) 0          0                0               0              0                0               0               0                       int index2 = (j + file_header.width* (file_header.height-1))*3 + c;
    1,800 ( 0.00%) 0          0              900 ( 0.00%)     13 ( 0.00%)     1 ( 0.00%)     900 ( 0.00%)     27 ( 0.00%)     27 ( 0.00%)              piccel2[index2] = piccel[index2];
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               
        5 ( 0.00%) 0          0                1 ( 0.00%)      0              0                4 ( 0.00%)      0               0               int counts[5] = {0, 0, 0, 0, 0};
        .          .          .                .               .              .                .               .               .           
        3 ( 0.00%) 0          0                1 ( 0.00%)      0              0                2 ( 0.00%)      1 ( 0.00%)      1 ( 0.00%)      uint8_t* res = new uint8_t[pixcel_color_count];
  600,010 ( 0.01%) 1 ( 0.01%) 1 ( 0.01%) 120,002 ( 0.02%)      0              0                1 ( 0.00%)      0               0               for(int i = 0; i < pixcel_color_count/3; i++){
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 120,000 ( 0.02%)      0              0                0               0               0                   for(int c = 0; c < 3; c++){
1,440,000 ( 0.03%) 1 ( 0.01%) 1 ( 0.01%) 360,000 ( 0.05%) 11,222 ( 0.18%) 6,435 ( 0.21%)       0               0               0                        if(piccel2[i*3 + c] > 255){
   16,780 ( 0.00%) 0          0                0               0              0            8,390 ( 0.01%)      0               0                           piccel2[i*3 + c] = 255;
        .          .          .                .               .              .                .               .               .                       }
  703,220 ( 0.02%) 0          0                0               0              0                0               0               0                       else if(piccel2[i*3 + c] < 0){
   45,048 ( 0.00%) 0          0                0               0              0           22,524 ( 0.02%)      0               0                           piccel2[i*3 + c] = 0;
        .          .          .                .               .              .                .               .               .                       }
  720,000 ( 0.02%) 0          0          360,000 ( 0.05%)      0              0          360,000 ( 0.27%)  5,625 ( 0.34%)  5,625 ( 0.35%)              res[i*3 + c] = piccel2[i*3 + c];
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .           
1,920,000 ( 0.05%) 1 ( 0.01%) 1 ( 0.01%) 840,000 ( 0.11%)      2 ( 0.00%)     2 ( 0.00%)       0               0               0                   float color = 0.2126*res[i*3] + 0.7152*res[i*3+1] + 0.0722*res[i*3+2];
  120,000 ( 0.00%) 0          0                0               0              0                0               0               0                   uint8_t roundedColor = (uint8_t)std::round(color);
  240,000 ( 0.01%) 0          0                0               0              0                0               0               0                   if(roundedColor <= 50){
   24,432 ( 0.00%) 0          0           24,432 ( 0.00%)      0              0                0               0               0                       counts[0]++;
        .          .          .                .               .              .                .               .               .                   }
  191,136 ( 0.00%) 0          0                0               0              0                0               0               0                   else if(roundedColor <= 101){
   32,614 ( 0.00%) 0          0           16,307 ( 0.00%)      0              0                0               0               0                       counts[1]++;
        .          .          .                .               .              .                .               .               .                   }
  158,522 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       0               0              0                0               0               0                   else if(roundedColor <= 152){
   30,384 ( 0.00%) 0          0           15,192 ( 0.00%)      0              0                0               0               0                       counts[2]++;
        .          .          .                .               .              .                .               .               .                   }
  128,138 ( 0.00%) 0          0                0               0              0                0               0               0                   else if(roundedColor <= 203){
  109,194 ( 0.00%) 0          0           54,597 ( 0.01%)      0              0                0               0               0                       counts[3]++;
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .                   else{
   18,944 ( 0.00%) 0          0            9,472 ( 0.00%)      0              0                0               0               0                       counts[4]++;
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .               }
        .          .          .                .               .              .                .               .               .               ofstream text("out.txt");
       19 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       5 ( 0.00%)      0              0                5 ( 0.00%)      0               0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
        .          .          .                .               .              .                .               .               .               text.close();
        .          .          .                .               .              .                .               .               .           
        6 ( 0.00%) 0          0                2 ( 0.00%)      0              0                1 ( 0.00%)      0               0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
        2 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       1 ( 0.00%)      0              0                1 ( 0.00%)      0               0               delete[] piccel;
        2 ( 0.00%) 0          0                1 ( 0.00%)      0              0                1 ( 0.00%)      0               0               delete[] piccel2;
        2 ( 0.00%) 0          0                0               0              0                1 ( 0.00%)      0               0               delete[] res;
        .          .          .                .               .              .                .               .               .               ifs.close();
        .          .          .                .               .              .                .               .               .               ofs.close();
        .          .          .                .               .              .                .               .               .           
       11 ( 0.00%) 1 ( 0.01%) 1 ( 0.01%)       9 ( 0.00%)      2 ( 0.00%)     2 ( 0.00%)       0               0               0           }
        .          .          .                .               .              .                .               .               .           
        .          .          .                .               .              .                .               .               .           void see_file(const string& in_file)  {
        .          .          .                .               .              .                .               .               .               ifstream ifs(in_file, ios::binary);
        .          .          .                .               .              .                .               .               .               if(!ifs){
        .          .          .                .               .              .                .               .               .                   if(!ifs){
        .          .          .                .               .              .                .               .               .                       ifs.close();
        .          .          .                .               .              .                .               .               .                   }
        .          .          .                .               .              .                .               .               .                   cout << "file open error" << endl;
-- line 196 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./math/../sysdeps/ieee754/flt-32/s_roundf.c

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr         Dr                   D1mr               DLmr               Dw                   D1mw               DLmw               
--------------------------------------------------------------------------------
3,326,144,797 (80.62%) 293 ( 3.48%) 271 ( 3.86%) 729,956,947 (91.35%) 6,210,094 (99.29%) 3,092,224 (99.29%) 133,999,273 (99.35%) 1,601,636 (98.23%) 1,571,874 (98.75%)  events annotated

