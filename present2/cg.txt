--------------------------------------------------------------------------------
I1 cache:         32768 B, 64 B, 8-way associative
D1 cache:         32768 B, 64 B, 8-way associative
LL cache:         1048576 B, 64 B, 16-way associative
Command:          ./a.out ../vit_normal.ppm
Data file:        cachegrind.out.56661
Events recorded:  Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Events shown:     Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Event sort order: Ir I1mr ILmr Dr D1mr DLmr Dw D1mw DLmw
Thresholds:       0.1 100 100 100 100 100 100 100 100
Include dirs:     
User annotated:   main.cpp
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     I1mr           ILmr           Dr                   D1mr               DLmr               Dw                  D1mw               DLmw               
--------------------------------------------------------------------------------
1,963,739,850 (100.0%) 2,448 (100.0%) 2,365 (100.0%) 384,060,225 (100.0%) 1,521,812 (100.0%) 1,515,749 (100.0%) 65,375,289 (100.0%) 1,504,286 (100.0%) 1,503,423 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                     I1mr         ILmr         Dr                   D1mr             DLmr             Dw                  D1mw             DLmw              file:function
--------------------------------------------------------------------------------
1,559,838,255 (79.43%)  35 ( 1.43%)  35 ( 1.48%) 350,224,224 (91.19%) 761,306 (50.03%) 761,256 (50.22%) 47,791,967 (73.10%) 755,386 (50.22%) 755,383 (50.24%)  /home/yoshinao/aps/present2/main.cpp:main
  350,087,246 (17.83%)   2 ( 0.08%)   2 ( 0.08%)  15,925,248 ( 4.15%)       0                0                   0                0                0           ./math/../sysdeps/ieee754/flt-32/s_roundf.c:roundf
   31,856,018 ( 1.62%) 350 (14.30%) 340 (14.38%)  15,927,392 ( 4.15%)     207 ( 0.01%)      83 ( 0.01%)        632 ( 0.00%)      21 ( 0.00%)      13 ( 0.00%)  ???:???
   15,925,248 ( 0.81%)   0            0                    0                0                0          15,925,248 (24.36%)       0                0           /usr/include/c++/12/cmath:main
    4,122,176 ( 0.21%)  19 ( 0.78%)  19 ( 0.80%)   1,493,302 ( 0.39%) 746,498 (49.05%) 746,497 (49.25%)  1,493,278 ( 2.28%) 746,624 (49.63%) 746,624 (49.66%)  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S:__memcpy_avx_unaligned_erms

--------------------------------------------------------------------------------
-- User-annotated source: main.cpp
--------------------------------------------------------------------------------
  No information has been collected for main.cpp

--------------------------------------------------------------------------------
-- Auto-annotated source: /home/yoshinao/aps/present2/main.cpp
--------------------------------------------------------------------------------
Ir                   I1mr       ILmr       Dr                  D1mr             DLmr             Dw                  D1mw             DLmw             

-- line 9 ----------------------------------------
          .          .          .                   .                .                .                   .                .                .           struct PPMFileHeader{
          .          .          .                   .                .                .                   .                .                .               int width;
          .          .          .                   .                .                .                   .                .                .               int height;
          .          .          .                   .                .                .                   .                .                .           };
          .          .          .                   .                .                .                   .                .                .           const float weightR = 0.2126f;
          .          .          .                   .                .                .                   .                .                .           const float weightG = 0.7152f;
          .          .          .                   .                .                .                   .                .                .           const float weightB = 0.0722f;
          .          .          .                   .                .                .                   .                .                .           
         11 ( 0.00%) 0          0                   1 ( 0.00%)       0                0                   7 ( 0.00%)       0                0           int main(int argc, char** argv){
          .          .          .                   .                .                .                   .                .                .           
          4 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          1 ( 0.00%)       0                0                   1 ( 0.00%)       1 ( 0.00%)       0               ifstream ifs(argv[1], ios::binary);
          4 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               ofstream ofs("output.ppm", ios::binary);
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .              
          .          .          .                   .                .                .                   .                .                .               PPMFileHeader file_header;
          .          .          .                   .                .                .                   .                .                .               char magic[3];
          4 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               ifs.read((char*)&magic, 3);
          4 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   1 ( 0.00%)       0                0               ofs.write((char*)&magic, 3);
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .               string line;
          .          .          .                   .                .                .                   .                .                .               uint16_t max;
          6 ( 0.00%) 2 ( 0.08%) 2 ( 0.08%)          0                0                0                   1 ( 0.00%)       0                0               while(ifs.peek() == '#'){
          .          .          .                   .                .                .                   .                .                .                   getline(ifs, line);
          .          .          .                   .                .                .                   .                .                .                   ofs.write(line.c_str(), line.size());
          .          .          .                   .                .                .                   .                .                .               }
          7 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   2 ( 0.00%)       0                0               ifs >> file_header.width >> file_header.height >> max;
          2 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               ifs.get();
         15 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          2 ( 0.00%)       0                0                   5 ( 0.00%)       0                0               ofs << file_header.width << "\n" << file_header.height << "\n" << max << "\n";
          .          .          .                   .                .                .                   .                .                .               
          .          .          .                   .                .                .                   .                .                .               // cout << file_header.width << " " << file_header.height << " " << max << endl;
          3 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          2 ( 0.00%)       0                0                   0                0                0               int pixcel_color_count = file_header.width * file_header.height* 3;
          5 ( 0.00%) 0          0                   0                0                0                   2 ( 0.00%)       1 ( 0.00%)       0               uint8_t* piccel = new uint8_t[pixcel_color_count];
          3 ( 0.00%) 0          0                   0                0                0                   2 ( 0.00%)       1 ( 0.00%)       0               uint8_t* res = new uint8_t[pixcel_color_count];
          5 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   5 ( 0.00%)       0                0               int counts[5] = {0, 0, 0, 0, 0};
          .          .          .                   .                .                .                   .                .                .           
          5 ( 0.00%) 0          0                   0                0                0                   2 ( 0.00%)       0                0               ifs.read((char*)piccel, pixcel_color_count* sizeof(uint8_t));
          6 ( 0.00%) 2 ( 0.08%) 2 ( 0.08%)          2 ( 0.00%)       0                0                   2 ( 0.00%)       0                0               int totalSize = file_header.width * file_header.height * 3;
          1 ( 0.00%) 0          0                   0                0                0                   0                0                0               std::copy(piccel, piccel + totalSize, res);
          .          .          .                   .                .                .                   .                .                .               const int TILE_SIZE = 1800;
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .              
         22 ( 0.00%) 0          0                   1 ( 0.00%)       1 ( 0.00%)       1 ( 0.00%)          0                0                0               for (int tileRow = 1; tileRow < file_header.height - 1; tileRow += TILE_SIZE) {
         18 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   6 ( 0.00%)       0                0                   int maxRow = std::min(tileRow + TILE_SIZE, file_header.height - 1);
 31,818,278 ( 1.62%) 0          0                   0                0                0                   0                0                0                   for (int tileCol = 1; tileCol < file_header.width - 1; tileCol += TILE_SIZE) {
         36 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                  12 ( 0.00%)       0                0                       int maxCol = std::min(tileCol + TILE_SIZE, file_header.width - 1);
          .          .          .                   .                .                .                   .                .                .           
     73,822 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)     18,451 ( 0.00%)       0                0                  24 ( 0.00%)       0                0                       for (int i = tileRow; i < maxRow; i++) {
 95,666,650 ( 4.87%) 2 ( 0.08%) 2 ( 0.08%)     27,660 ( 0.01%)       6 ( 0.00%)       6 ( 0.00%)     64,484 ( 0.10%)       0                0                           for (int j = tileCol; j < maxCol; j++) {
159,091,240 ( 8.10%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   0                0                0                               for (int c = 0; c < 3; c++) {
 47,727,372 ( 2.43%) 0          0                   0                0                0                   0                0                0                                   int16_t tmp =
 47,727,372 ( 2.43%) 0          0          47,727,372 (12.43%) 755,382 (49.64%) 755,382 (49.84%)          0                0                0                                       -(int16_t)piccel[(j + file_header.width * (i + 1)) * 3 + c]
 47,727,372 ( 2.43%) 0          0          47,727,372 (12.43%)     490 ( 0.03%)     488 ( 0.03%)          0                0                0                                       -(int16_t)piccel[(j + file_header.width * (i - 1)) * 3 + c]
 47,727,372 ( 2.43%) 0          0          47,727,372 (12.43%)       0                0                   0                0                0                                       -(int16_t)piccel[((j - 1) + file_header.width * i) * 3 + c]
238,636,860 (12.15%) 1 ( 0.04%) 1 ( 0.04%) 47,727,372 (12.43%)       4 ( 0.00%)       4 ( 0.00%)          0                0                0                                       +(int16_t)5 * (int16_t)piccel[(j + file_header.width * i) * 3 + c]
 95,454,744 ( 4.86%) 0          0          47,727,372 (12.43%)     486 ( 0.03%)     484 ( 0.03%)          0                0                0                                       -(int16_t)piccel[((j + 1) + file_header.width * i) * 3 + c];
          .          .          .                   .                .                .                   .                .                .           
          .          .          .                   .                .                .                   .                .                .                                   if (tmp > 255) {
          .          .          .                   .                .                .                   .                .                .                                       tmp = 255;
143,182,116 ( 7.29%) 0          0                   0                0                0                   0                0                0                                   } else if (tmp < 0) {
          .          .          .                   .                .                .                   .                .                .                                       tmp = 0;
          .          .          .                   .                .                .                   .                .                .                                   }
190,909,488 ( 9.72%) 0          0                   0                0                0          47,727,372 (73.01%) 755,382 (50.22%) 755,382 (50.24%)                          res[(j + file_header.width * i) * 3 + c] = tmp;
          .          .          .                   .                .                .                   .                .                .                               }
          .          .          .                   .                .                .                   .                .                .           
 95,454,744 ( 4.86%) 0          0          31,818,248 ( 8.28%)       1 ( 0.00%)       1 ( 0.00%)          0                0                0                               float color = weightR * res[(j + file_header.width * i) * 3] + 
 63,636,522 ( 3.24%) 2 ( 0.08%) 2 ( 0.08%) 31,818,249 ( 8.28%)       0                0                  15 ( 0.00%)       0                0                                           weightG * res[(j + file_header.width * i) * 3 + 1] + 
 63,636,496 ( 3.24%) 0          0          31,818,248 ( 8.28%)       0                0                   0                0                0                                           weightB * res[(j + file_header.width * i) * 3 + 2];
 95,487,829 ( 4.86%) 0          0              64,485 ( 0.02%)       0                0                   2 ( 0.00%)       1 ( 0.00%)       1 ( 0.00%)                      uint8_t count_index = (uint8_t)std::round(color)/51;
 47,727,372 ( 2.43%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   0                0                0                               if(count_index> 4) count_index = 4;
          .          .          .                   .                .                .                   .                .                .           
 47,727,372 ( 2.43%) 0          0          15,909,124 ( 4.14%)       1 ( 0.00%)       1 ( 0.00%)          0                0                0                               counts[count_index]++;
          .          .          .                   .                .                .                   .                .                .                           }
          .          .          .                   .                .                .                   .                .                .                       }
          .          .          .                   .                .                .                   .                .                .                   }
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .            
          .          .          .                   .                .                .                   .                .                .           
     18,438 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          2 ( 0.00%)       0                0                   0                0                0               for(int i = 1; i < file_header.height-1; i++){
          .          .          .                   .                .                .                   .                .                .                   int index = (file_header.width* i)*3;
          .          .          .                   .                .                .                   .                .                .                   int index1 = ((file_header.width-1) + file_header.width* i)*3;
     64,484 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)     27,636 ( 0.01%)       1 ( 0.00%)       1 ( 0.00%)          0                0                0                   float color = weightR * res[index] + weightG * res[index+ 1] + weightB * res[index+ 2];
     23,030 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   0                0                0                    uint8_t count_index = (uint8_t)std::round(color)/51;
     13,818 ( 0.00%) 0          0                   0                0                0                   0                0                0                               if(count_index> 4) count_index = 4;
          .          .          .                   .                .                .                   .                .                .           
      9,212 ( 0.00%) 0          0               4,606 ( 0.00%)       0                0                   0                0                0                               counts[count_index]++;
     69,090 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)     27,636 ( 0.01%)   4,606 ( 0.30%)   4,562 ( 0.30%)          0                0                0                   color = weightR * res[index1] + weightG * res[index1+ 1] + weightB * res[index1+ 2];
     27,636 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   0                0                0                    count_index = (uint8_t)std::round(color)/51;
     13,818 ( 0.00%) 0          0                   0                0                0                   0                0                0                               if(count_index> 4) count_index = 4;
          .          .          .                   .                .                .                   .                .                .           
      9,212 ( 0.00%) 0          0               4,606 ( 0.00%)       0                0                   0                0                0                               counts[count_index]++;
          .          .          .                   .                .                .                   .                .                .               }
     10,376 ( 0.00%) 0          0                   2 ( 0.00%)       1 ( 0.00%)       0                   0                0                0               for(int j = 0; j < file_header.width; j++){
          .          .          .                   .                .                .                   .                .                .                   int index = (j)*3 ;
          4 ( 0.00%) 0          0                   1 ( 0.00%)       0                0                   0                0                0                   int index1 = (j + file_header.width* (file_header.height-1))*3;
     51,840 ( 0.00%) 2 ( 0.08%) 2 ( 0.08%)     20,736 ( 0.01%)     163 ( 0.01%)     162 ( 0.01%)          0                0                0                   float color = weightR * res[index] + weightG * res[index+ 1] + weightB * res[index+ 2];
     13,826 ( 0.00%) 0          0                   0                0                0                   0                0                0                    uint8_t count_index = (uint8_t)std::round(color)/51;
     10,369 ( 0.00%) 0          0                   0                0                0                   0                0                0                               if(count_index> 4) count_index = 4;
          .          .          .                   .                .                .                   .                .                .           
      6,912 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)      3,456 ( 0.00%)       0                0                   0                0                0                               counts[count_index]++;
     48,384 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)     20,736 ( 0.01%)     162 ( 0.01%)     162 ( 0.01%)          0                0                0                   color = weightR * res[index1] + weightG * res[index1+ 1] + weightB * res[index1+ 2];
     17,280 ( 0.00%) 0          0                   0                0                0                   0                0                0                   count_index = (uint8_t)std::round(color)/51;
     10,368 ( 0.00%) 0          0                   0                0                0                   0                0                0                               if(count_index> 4) count_index = 4;
          .          .          .                   .                .                .                   .                .                .           
      6,912 ( 0.00%) 0          0               3,456 ( 0.00%)       0                0                   0                0                0                               counts[count_index]++;
          .          .          .                   .                .                .                   .                .                .               }
          .          .          .                   .                .                .                   .                .                .             
          4 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          0                0                0                   1 ( 0.00%)       0                0               ofstream text("output.txt");
         27 ( 0.00%) 2 ( 0.08%) 2 ( 0.08%)          5 ( 0.00%)       0                0                   9 ( 0.00%)       0                0               text << counts[0] << " " << counts[1] << " " << counts[2] << " " << counts[3] << " " << counts[4];
          2 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               text.close();
          .          .          .                   .                .                .                   .                .                .           
          5 ( 0.00%) 0          0                   2 ( 0.00%)       0                0                   1 ( 0.00%)       0                0               ofs.write((char*)res, pixcel_color_count* sizeof(uint8_t));
          2 ( 0.00%) 1 ( 0.04%) 1 ( 0.04%)          1 ( 0.00%)       0                0                   1 ( 0.00%)       0                0               delete[] piccel;
          2 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               delete[] res;
          2 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               ifs.close();
          2 ( 0.00%) 0          0                   0                0                0                   1 ( 0.00%)       0                0               ofs.close();
         22 ( 0.00%) 3 ( 0.12%) 3 ( 0.13%)         11 ( 0.00%)       2 ( 0.00%)       2 ( 0.00%)          4 ( 0.00%)       0                0           }
--------------------------------------------------------------------------------
-- Auto-annotated source: /usr/include/c++/12/cmath
--------------------------------------------------------------------------------
Ir                  I1mr       ILmr       Dr         D1mr       DLmr       Dw                  D1mw       DLmw       

-- line 1749 ----------------------------------------
         .          .          .          .          .          .                   .          .          .                                                         double>::__type
         .          .          .          .          .          .                   .          .          .               rint(_Tp __x)
         .          .          .          .          .          .                   .          .          .               { return __builtin_rint(__x); }
         .          .          .          .          .          .                   .          .          .           #endif
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
         .          .          .          .          .          .                   .          .          .             constexpr float
         .          .          .          .          .          .                   .          .          .             round(float __x)
15,925,248 ( 0.81%) 0          0          0          0          0          15,925,248 (24.36%) 0          0             { return __builtin_roundf(__x); }
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .             constexpr long double
         .          .          .          .          .          .                   .          .          .             round(long double __x)
         .          .          .          .          .          .                   .          .          .             { return __builtin_roundl(__x); }
         .          .          .          .          .          .                   .          .          .           #endif
         .          .          .          .          .          .                   .          .          .           
         .          .          .          .          .          .                   .          .          .           #ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_INT
         .          .          .          .          .          .                   .          .          .             template<typename _Tp>
-- line 1765 ----------------------------------------

--------------------------------------------------------------------------------
The following files chosen for auto-annotation could not be found:
--------------------------------------------------------------------------------
  ./math/../sysdeps/ieee754/flt-32/s_roundf.c
  ./string/../sysdeps/x86_64/multiarch/memmove-vec-unaligned-erms.S

--------------------------------------------------------------------------------
Ir                     I1mr        ILmr        Dr                   D1mr             DLmr             Dw                  D1mw             DLmw             
--------------------------------------------------------------------------------
1,575,763,507 (80.24%) 36 ( 1.47%) 36 ( 1.52%) 350,224,226 (91.19%) 761,306 (50.03%) 761,256 (50.22%) 63,717,216 (97.46%) 755,386 (50.22%) 755,383 (50.24%)  events annotated

